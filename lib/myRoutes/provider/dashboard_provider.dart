// ignore_for_file: unused_import, unnecessary_import

import 'package:adlitem_flutter/constants/colors.dart';
import 'package:adlitem_flutter/constants/environment.dart';
import 'package:adlitem_flutter/helpers/Devices.dart';
import 'package:adlitem_flutter/helpers/WebSocket.dart';

import 'package:adlitem_flutter/models/systemAccount.dart';
import 'package:adlitem_flutter/myRoutes/cancelFees.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/AreasCoverage.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/Certifications.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/Language.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/ProcedingCover.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/rates_requirements/ListRequirements.dart';
import 'package:adlitem_flutter/myRoutes/provider/TabsContent/rates_requirements/Requirements.dart';
import 'package:adlitem_flutter/myRoutes/provider/providerMap.dart';
import 'package:adlitem_flutter/myRoutes/terms_conditions.dart';
import 'package:adlitem_flutter/myWidgets/mydrawer.dart';
import 'package:adlitem_flutter/providers/AppProvider.dart';
import 'package:adlitem_flutter/services/NotificationService.dart';
import 'package:bootstrap_icons/bootstrap_icons.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../myWidgets/kprofile_header.dart';
import 'package:badges/badges.dart' as badges;
import 'package:socket_io_client/socket_io_client.dart' as IO;

class DashboardProvider extends StatefulWidget {
  final int selectedIndex = 0;

  DashboardProvider({
    Key? key,
  }) : super(key: key);

  @override
  State<DashboardProvider> createState() => _DashboardProviderState();
}

class _DashboardProviderState extends State<DashboardProvider> {
  bool cancelationAgree = false;
  var notifications = [];
  late SystemAccount user;

  final IO.Socket socket = WebSocketApp().SetConnection();

  _connectocket() {
    socket.onConnect((data) => print("Connection OK"));
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    socket.emit('userId', u.systemaccountId);
    socket.on(
        'getNotificationByUser',
        (response) => {
              if (mounted)
                setState(() {
                  notifications = response['data'];
                }),
              //print(response['data'])
            });
    socket.onConnectError((data) => print('Connection Error: $data'));
    socket.onDisconnect((data) => print('Server Disconnected'));
  }

  @override
  void initState() {
    super.initState();

    _connectocket();
  }

  void readNotifications() async {
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    var res = await NotificationService().GetbyUser(u);
    if (res['success'] == -1) {
      //AppMessage.ShowError(res['message'], context);
    } else if (res['success'] == 0) {
      setState(() {
        notifications = [];
      });
    } else if (res['success'] == 1) {
      setState(() {
        notifications = res['data'];
      });
    } else {
      setState(() {
        notifications = [];
      });
    }
  }

  List<PopupMenuItem> getListNoti() {
    List<PopupMenuItem> l = <PopupMenuItem>[];
    notifications.forEach((element) {
      l.add(PopupMenuItem(
        height: 35,
        child: buildItem(element),
        value: element,
        onTap: () {
          NotificationService().Delete(element['id']);
        },
      ));
    });
    return l;
  }

  Widget buildItem(element) {
    return Container(
      //color: Color.fromRGBO(224, 251, 253, 1.0),
      child: ListTile(
        dense: false,
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            RichText(
              textAlign: TextAlign.left,
              softWrap: true,
              text: TextSpan(children: <TextSpan>[
                TextSpan(
                    text: element['descripcion'].toString().toLowerCase(),
                    style: TextStyle(
                        color: Colors.black, fontWeight: FontWeight.bold)),
                TextSpan(
                    text: " | Generated by client",
                    style: TextStyle(color: Colors.black)),
              ]),
            ),
          ],
        ),
      ),
    );
    // Column(children: [
    //   Row(
    //     crossAxisAlignment: CrossAxisAlignment.center,
    //     mainAxisAlignment: MainAxisAlignment.spaceBetween,
    //     children: [
    //       Row(
    //           crossAxisAlignment: CrossAxisAlignment.center,
    //           mainAxisAlignment: MainAxisAlignment.spaceBetween,
    //           children: [
    //             Icon(
    //               Icons.check,
    //               color: Colors.black12,
    //             ),
    //             Text(
    //               element['descripcion'].toString().toLowerCase(),
    //               style: TextStyle(fontSize: 13),
    //               overflow: TextOverflow.fade,
    //               maxLines: 2,
    //               softWrap: false,
    //             ),
    //           ]),
    //       Divider(),
    //       IconButton(
    //         onPressed: () {},
    //         icon: Icon(BootstrapIcons.trash),
    //         color: Colors.red,
    //         iconSize: 15,
    //       ),
    //     ],
    //   )
    // ]);
  }

  @override
  Widget build(BuildContext context) {
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    Size size = MediaQuery.of(context).size;
    setState(() {
      cancelationAgree = u.cancelAgree;
    });

    //readNotifications();
    return DefaultTabController(
        length: 6,
        child: Scaffold(
            appBar: AppBar(
              centerTitle: true,
              actions: [
                Padding(
                    padding: EdgeInsets.only(right: 20, top: 20),
                    child: PopupMenuButton(
                        position: PopupMenuPosition.under,
                        onSelected: (value) {},
                        child: badges.Badge(
                          badgeStyle: badges.BadgeStyle(
                              shape: badges.BadgeShape.circle,
                              badgeColor: Colors.lightBlue),
                          badgeContent: Text(
                            notifications.length.toString(),
                            style: TextStyle(
                                fontSize: 12,
                                color: Colors.white,
                                fontWeight: FontWeight.bold),
                          ),
                          child: Icon(
                            BootstrapIcons.bell_fill,
                            color: Colors.white,
                          ),
                        ),
                        itemBuilder: (BuildContext bc) {
                          return getListNoti();
                        })),
              ],
              title: const Text(
                "Provider Dashboard",
                style: TextStyle(fontSize: 15.0, color: WHITE),
              ),
              leading: Builder(
                builder: (BuildContext context) {
                  return IconButton(
                    icon: const Icon(
                      Icons.menu,
                      color: Colors.white,
                    ),
                    onPressed: () {
                      Scaffold.of(context).openDrawer();
                    },
                    tooltip:
                        MaterialLocalizations.of(context).openAppDrawerTooltip,
                  );
                },
              ),
              bottom: TabBar(
                labelColor: Colors.redAccent,
                unselectedLabelColor: Colors.white,
                indicatorSize: TabBarIndicatorSize.tab,
                indicator: BoxDecoration(
                    borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(10),
                        topRight: Radius.circular(10)),
                    color: Colors.white),
                tabs: [
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(Icons.dashboard),
                      ),
                    ),
                  ),
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(Icons.event),
                      ),
                    ),
                  ),
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(Icons.location_pin),
                      ),
                    ),
                  ),
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(Icons.translate),
                      ),
                    ),
                  ),
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(BootstrapIcons.mortarboard),
                      ),
                    ),
                  ),
                  Tab(
                    child: Container(
                      decoration: BoxDecoration(
                          border:
                              Border.all(color: Colors.transparent, width: 1)),
                      child: Align(
                        alignment: Alignment.center,
                        child: Icon(Icons.work_outline),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            drawer: myDrawer(),
            body: Center(
              child: Stack(children: [
                TabBarView(
                  children: [
                    ProviderMap(),
                    ListRequirements(),
                    AreasCoverage(),
                    Language(),
                    Certifications(),
                    ProcedingCover(),
                  ],
                ), //New
              ]),
            )));
  }
}
