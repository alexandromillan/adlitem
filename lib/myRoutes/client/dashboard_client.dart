//import 'package:adlitem_flutter/constants/environment.dart';
import 'package:adlitem_flutter/helpers/WebSocket.dart';
import 'package:adlitem_flutter/models/systemAccount.dart';
import 'package:adlitem_flutter/myRoutes/terms_conditions.dart';
import 'package:adlitem_flutter/myWidgets/mydrawer.dart';
import 'package:adlitem_flutter/providers/AppProvider.dart';
import 'package:adlitem_flutter/services/NotificationService.dart';
import 'package:bootstrap_icons/bootstrap_icons.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'clientMap.dart';
import 'package:badges/badges.dart' as badges;

import 'package:socket_io_client/socket_io_client.dart';
import 'package:socket_io_client/socket_io_client.dart' as IO;

class DashboardClient extends StatefulWidget {
  DashboardClient({
    Key? key,
  }) : super(key: key);

  @override
  State<DashboardClient> createState() => _DashboardClientState();
}

class _DashboardClientState extends State<DashboardClient> {
  var notifications = [];
  late SystemAccount user;
  bool cancelationAgree = false;

  final IO.Socket socket = WebSocketApp().SetConnection();
  _connectocket() {
    socket.onConnect((data) => print("Connection OK"));
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    socket.emit('userId', u.systemaccountId);
    socket.on(
        'getNotificationByUser',
        (response) => {
              if (mounted)
                setState(() {
                  notifications = response['data'];
                }),
              //print(response['data'])
            });
    socket.onConnectError((data) => print('Connection Error: $data'));
    socket.onDisconnect((data) => print('Server Disconnected'));
  }

  @override
  void initState() {
    super.initState();
    //checkTerms();
    _connectocket();
  }

  @override
  void dispose() {
    super.dispose();
    //socket.disconnect();
  }

  // void checkTerms() {
  //   SystemAccount u = context.read<AppProvider>().getLoggedUser();

  //   if (!u.cancelAgree) {
  //     Navigator.push(
  //       context,
  //       CupertinoPageRoute(builder: (context) => TermsConditions()),
  //       //Register(title: "")),
  //     );
  //   }
  // }

  void readNotifications() async {
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    var res = await NotificationService().GetbyUser(u);
    if (res['success'] == -1) {
      //AppMessage.ShowError(res['message'], context);
    } else if (res['success'] == 0) {
      setState(() {
        notifications = [];
      });
    } else if (res['success'] == 1) {
      setState(() {
        notifications = res['data'];
      });
    } else {
      setState(() {
        notifications = [];
      });
    }
    //  });
  }

  List<PopupMenuItem> getListNoti() {
    List<PopupMenuItem> l = <PopupMenuItem>[];
    notifications.forEach((element) {
      l.add(PopupMenuItem(
        height: 35,
        child: buildItem(element),
        value: element,
        onTap: () {
          NotificationService().Delete(element['id']);
        },
      ));
    });
    return l;
  }

  Widget buildItem(element) {
    SystemAccount u = context.read<AppProvider>().getLoggedUser();
    setState(() {
      cancelationAgree = u.cancelAgree;
    });
    return Container(
      //color: Color.fromRGBO(224, 251, 253, 1.0),
      child: ListTile(
        dense: false,
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            RichText(
              textAlign: TextAlign.left,
              softWrap: true,
              text: TextSpan(children: <TextSpan>[
                TextSpan(
                    text: element['descripcion'].toString().toLowerCase(),
                    style: TextStyle(
                        color: Colors.black, fontWeight: FontWeight.bold)),
                TextSpan(
                    text: " | Generated by adlitem",
                    style: TextStyle(color: Colors.black)),
              ]),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    //_connectocket();
    return Scaffold(
      appBar: AppBar(
        // centerTitle: true,
        title: const Text(
          "Client Dashboard",
          style: TextStyle(fontSize: 20.0, color: Colors.white),
        ),
        actions: [
          Padding(
              padding: EdgeInsets.only(right: 20, top: 20),
              child: PopupMenuButton(
                  position: PopupMenuPosition.under,
                  onSelected: (value) {},
                  child: badges.Badge(
                    badgeStyle: badges.BadgeStyle(
                        shape: badges.BadgeShape.circle,
                        badgeColor: Colors.lightBlue),
                    badgeContent: Text(
                      notifications.length.toString(),
                      style: TextStyle(
                          fontSize: 12,
                          color: Colors.white,
                          fontWeight: FontWeight.bold),
                    ),
                    child: Icon(
                      BootstrapIcons.bell_fill,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                  itemBuilder: (BuildContext bc) {
                    return getListNoti();
                  })),
        ],

        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: const Icon(
                Icons.menu,
                color: Colors.white,
              ),
              onPressed: () {
                Scaffold.of(context).openDrawer();
              },
              tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
            );
          },
        ), // backgroundColor: APP_COLORS.Primary,
      ),

      drawer: myDrawer(),
      // drawerScrimColor:
      //     Color.fromRGBO(25, 23, 235, 0.6), //completa el fondo del drawer
      body: ClientMap(),
    );
  }
}
